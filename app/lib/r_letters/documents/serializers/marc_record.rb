# frozen_string_literal: true

require 'marc'

module RLetters
  module Documents
    module Serializers
      # Convert a document to a Ruby MARC record object
      #
      # Support for individual-article MARC records is spotty at best -- this
      # is a use case for which the MARC format was not intended.  To
      # generate these records, we primarily follow the advice as presented
      # in
      # [PROPOSAL 2003-03](http://www.loc.gov/marc/marbi/2003/2003-03.html),
      # "Definition of Data Elements for Article Level Descsription."  We
      # also adhere to the prior standard of providing a "free-form" citation
      # entry in field, 773, subfield $g (Host Item Entry, Related Parts).
      # This should ensure a reasonable degree of compatibility.
      #
      # In cases where significant parts of a document record are missing
      # (i.e., no author, no title, no year), it is possible that the MARC
      # generated by this method will be invalid.  We're currently not going
      # out of our way to patch up records for these edge cases.
      class MarcRecord < Base
        private

        # Return the passed document as a MARC::Record object
        #
        # @parameter [Document] doc the document to convert
        # @return [MARC::Record] a MARC object
        def to_marc_record(doc)
          record = ::MARC::Record.new

          record.append(::MARC::ControlField.new('001', doc.uid))
          record.append(::MARC::ControlField.new('003', 'RLID'))
          record.append(
            ::MARC::ControlField.new(
              '005', Time.current.strftime('%Y%m%d%H%M%S.0')
            )
          )

          year_control = if doc.year
                           format('%04d', doc.year)
                         else
                           '0000'
                         end
          record.append(
            ::MARC::ControlField.new(
              '008', "110501s#{year_control}       ||||fo     ||0 0|eng d"
            )
          )

          record.append(::MARC::DataField.new('040', ' ', ' ',
                                              %w[a RLetters],
                                              %w[b eng],
                                              %w[c RLetters]))

          if doc.doi
            record.append(::MARC::DataField.new('024', '7', ' ',
                                                %w[2 doi],
                                                %W[a #{doc.doi}]))
          end

          unless doc.authors.empty?
            record.append(
              ::MARC::DataField.new(
                '100', '1', ' ',
                ::MARC::Subfield.new(
                  'a',
                  author_to_marc(doc.authors[0])
                )
              )
            )

            doc.authors.each do |a|
              record.append(
                ::MARC::DataField.new(
                  '700', '1', ' ',
                  ::MARC::Subfield.new('a', author_to_marc(a))
                )
              )
            end
          end

          if doc.title
            record.append(
              ::MARC::DataField.new(
                '245', '1', '0',
                ['a', doc.title + (doc.title[-1] == '.' ? nil : '.')]
              )
            )
          end

          marc_volume = +''
          marc_volume << "v. #{doc.volume}" if doc.volume
          marc_volume << ' ' if doc.volume && doc.number
          marc_volume << "no. #{doc.number}" if doc.number
          record.append(
            ::MARC::DataField.new(
              '490', '1', ' ',
              ::MARC::Subfield.new('a', doc.journal),
              ::MARC::Subfield.new('v', marc_volume)
            )
          )
          record.append(
            ::MARC::DataField.new(
              '830', ' ', '0',
              ::MARC::Subfield.new('a', doc.journal),
              ::MARC::Subfield.new('v', marc_volume)
            )
          )

          marc_free = +''
          if doc.volume
            marc_free << "Vol. #{doc.volume}"
            marc_free << (doc.number ? ', ' : ' ')
          end
          marc_free << "no. #{doc.number} " if doc.number
          marc_free << "(#{doc.year})" if doc.year
          marc_free << ", p. #{doc.pages}" if doc.pages

          marc_enumeration = +''
          marc_enumeration << doc.volume if doc.volume
          marc_enumeration << ":#{doc.number}" if doc.number
          marc_enumeration << "<#{doc.start_page}" if doc.start_page

          record.append(
            ::MARC::DataField.new(
              '773', '0', ' ',
              %W[t #{doc.journal}],
              %W[g #{marc_free}],
              %W[q #{marc_enumeration}],
              %w[7 nnas]
            )
          )

          subfields = []
          subfields << ['a', doc.volume] if doc.volume
          subfields << ['b', doc.number] if doc.number
          subfields << ['c', doc.start_page] if doc.start_page
          subfields << ['i', doc.year] if doc.year
          record.append(::MARC::DataField.new('363', ' ', ' ', *subfields))

          if doc.year
            record.append(
              ::MARC::DataField.new(
                '362', '0', ' ',
                %W[a #{doc.year}.]
              )
            )
          end

          record
        end

        # Convert the given author to MARC's format
        #
        # @param [RLetters::Documents::Author] author an author
        # @return [String] author formatted as MARC expects it
        def author_to_marc(author)
          (+'').tap do |ret|
            ret << author.prefix + ' ' if author.prefix
            ret << author.last
            ret << ' ' + author.suffix if author.suffix
            ret << ', ' + author.first
          end
        end
      end
    end
  end
end
